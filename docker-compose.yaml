services:
  web:
    build:
      context: ./src  # Points to src where Dockerfile is located
      dockerfile: Dockerfile  # Explicitly specify Dockerfile
    container_name: moi-farms-web
    environment:
      - PORT=8020
      - GUNICORN_CMD_ARGS="--bind 0.0.0.0:8000"  # Ensure Gunicorn binds to correct port
    ports:
      - "8020:8000"
    volumes:
      - ./src:/app  # Ensures code changes reflect in container
      - static_volume:/app/static  # Persistent storage for static files
      - media_volume:/app/media  # Persistent storage for media files
    env_file:
      - ./src/core/.env  # Loads environment variables
    depends_on:
      postgres_db:
        condition: service_healthy  # Ensures PostgreSQL is ready before Django starts
      redis_db:
        condition: service_started
    restart: unless-stopped
    command: >
      sh -c "python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             python manage.py createsuperuser --noinput || true &&
             gunicorn core.wsgi:application"

  postgres_db:
    image: postgres:latest
    container_name: moi-farms-postgres
    command: ["postgres", "-p", "5432"]
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    ports:
      - "5434:5432"  # Avoid conflict with local Postgres
    env_file:
      - src/core/.env
    restart: unless-stopped
    healthcheck:  # Ensures the DB is ready before Django starts
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis_db:
    image: redis:latest
    container_name: moi-farms-redis
    restart: always
    expose:
      - "6380"
    ports:
      - "6381:6380"  # Avoid port conflicts
    volumes:
      - redis_data:/data
    command: ["redis-server", "--appendonly", "yes", "--port", "6380"]

networks:
  default:
    driver: bridge

volumes:
  static_volume:
  media_volume:
  postgres_data:
  redis_data:
